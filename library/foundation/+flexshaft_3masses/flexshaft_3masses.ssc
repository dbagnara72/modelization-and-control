component flexshaft_3masses
% flexible shaft three masses two springs
%
% w_1.der == -(b_theta+b1)/J1*omega1 + b_theta/J1*omega2 - tau_theta12/J1 + t_m/J1;
%
% w_2.der == b_theta/J2*omega1 - (b_theta+b2)/J2*omega2 + b_theta/J2*omega3 + tau_theta12/J2 - tau_theta23/J2;
%
% w_3.der == b_theta/J3*omega2 - (b_theta+b3)/J3*omega3 + tau_theta23/J3 + t_l/J3;
% 
% t_theta_12.der == k_theta*(omega1 - omega2);
%
% t_theta_23.der == k_theta*(omega2 - omega3);
% 
% tau_theta12 == t_theta12;
%
% tau_theta23 == t_theta23;
%     
nodes
    Sm = foundation.mechanical.rotational.rotational; % Sm:left
    Sl = foundation.mechanical.rotational.rotational; % Sl:right
end

outputs
    tau_theta12 = { 0, 'N*m' }; % tau_theta12
    tau_theta23 = { 0, 'N*m' }; % tau_theta23
    tau_m = { 0, 'N*m' }; % tau_m
    tau_l = { 0, 'N*m' }; % tau_l
    omega1 = { 0, 'rad/s' }; % omega1
    omega2 = { 0, 'rad/s' }; % omega2
    omega3 = { 0, 'rad/s' }; % omega3
end
parameters
    b1 = { 0, '(N*m)*s/rad'};       % b1
    J1 = { 1, 'kg*m^2' };           % J1
    b2 = { 0, '(N*m)*s/rad'};       % b2
    J2 = { 1, 'kg*m^2' };           % J2
    b3 = { 0, '(N*m)*s/rad'};       % b3
    J3 = { 1, 'kg*m^2' };           % J3
    b_theta = { 0, '(N*m)*s/rad'};  % b_theta
    k_theta = { 1e3, 'N*m/rad' };   % k_theta
end

variables
    omega_1 = { 0, 'rad/s' };           % omega_1
    omega_2 = { 0, 'rad/s' };           % omega_2
    omega_3 = { 0, 'rad/s' };           % omega_3
    t_m = { 0, 'N*m' };                 % tau_m
    t_l = { 0, 'N*m' };                 % tau_l
    t_theta12 = { 0, 'N*m' };         % tau_theta12
    t_theta23 = { 0, 'N*m' };         % tau_theta23
end

branches
    t_m : Sm.t ->*;    
    t_l : Sl.t ->*;    
end

equations
    omega_1 == Sm.w;
    omega_3 == Sl.w;
    omega_1.der == -(b_theta+b1)/J1*omega_1 + b_theta/J1*omega_2 - t_theta12/J1 + t_m/J1;
    omega_2.der == b_theta/J2*omega_1 - (b_theta+b2)/J2*omega_2 + b_theta/J2*omega_3 + t_theta12/J2 - t_theta23/J2;
    omega_3.der == b_theta/J3*omega_2 - (b_theta+b3)/J3*omega_3 + t_theta23/J3 + t_l/J3;
    t_theta12.der == k_theta*(omega_1 - omega_2);
    t_theta23.der == k_theta*(omega_2 - omega_3);
    
%% outputs
    omega1 == omega_1;
    omega2 == omega_2;
    omega3 == omega_3;
    tau_m == t_m;
    tau_l == t_l;
    tau_theta12 == t_theta12;
    tau_theta23 == t_theta23;
end
% annotations
%     Icon = 'msmsm.jpg';
% end
end