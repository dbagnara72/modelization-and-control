component engine_D934
% Enginre engine D934


inputs
    % Engine throttle 
    theta = {0, '1'};                    % theta:left
end

outputs
    % Engine speed
    we = {0, 'rpm'};                  % we:right
    % Engine torque
    te = {0, 'N*m'};                    % te:right
end

nodes
   C = foundation.mechanical.rotational.rotational; % C:left
   D = foundation.mechanical.rotational.rotational; % D:right
end

parameters
    dynamic_responce = simscape.enum.onoff.on;   % Enable dynamic response
    cshaft_inertia = { 1, 'kg*m^2' };         % System inertia
    initial_speed = { 1, '1' };                  % Initial speed (rpm)
end

parameters(Access=private) 
rpm = {[-2140, -2100, -2000, -1900, -1800, -1700, -1600, -1500, -1400, ...
    -1300, -1200, -1100, -1000, -900, -800, -700, -600, -0.1, 0.1, 600, ...
    700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800,...
    1900, 2000, 2100, 2140], 'rpm'};

torque_fricion = { [174.38, 168.37, 159.09, 150.09, 141.86, 133.97, ...
    126.78, 120.25, 114.8, 109.53, 105.29, 101.43, 96.75, 92.76, 89.6, 86.76, ...
    84.8, 0, 0, -84.8, -86.76, -89.6 -92.76, -96.75, -101.43, -105.29, ...
    -109.53,-114.8, -120.25, -126.78, -133.97, -141.86, -150.09, ...
    -159.09, -168.37,-171.38], 'N*m'};

torque_nom = { [-660.07, -796.01, -907.96, -1019.98, -1070.98, ...
    -1123.89, -1175.99, -1224.03, -1254.98, -1250.99, -1250.98, ...
    -1250.98, -1050.04, -934.05, -780.06, -650, -450, -1, 1, 450, ...
    650, 780.06, 934.05, 1050.04, 1250.98, 1250.98, 1250.99, 1254.98, ...
    1224.03, 1175.99, 1123.89, 1070.98, 1019.98, 907.96, 796.01, ...
    660.07], 'N*m'};
                
    l1 = {101, '1/s'}      % Throttle model parameter wn^2
    l2 = {100, '1/s^2'}     % Throttle model parameter 2*zeta*wn
    desat = {1e-3, '1/s^2'}     % Throttle model parameter 2*zeta*wn
    t_rate_lim = {0.02, '1/s'}     
    treshold_lim = {500, 'N*m'}     

    rpm_consumption = {[800 900 1000 1100 1200 1300 1400 1500 1600 ...
        1700 1800 1900 2000 2100 2140], 'rpm'}; % input speed for engine map
    
    torque_consumption = {[100 200 300 400 500 600 700 800 900 ...
        1000 1100 1200 1250], 'N*m'}; % input torque for engine map
    
    consumption = {[...
        280.3 229.3 213.5 208.2 206.2 205.3 206.5 211.3 211.3 211.3 211.3 211.3 211.3; ...
        285.6 228.7 211.6 206.3 203.7 202.5 201.4 201.5 202.2 203.0 203.0 203.0 203.0; ...
        294.5 232.9 212.2 204.9 202.1 200.2 198.3 196.7 195.8 194.5 195.1 195.1 195.1; ...
        381.4 233.9 214.3 206.5 201.8 198.2 196.0 195.1 193.8 192.9 192.4 192.0 191.7; ...
        398.9 239.6 217.5 206.6 200.5 197.9 195.5 193.7 192.6 191.9 191.5 191.3 191.3; ...
        381.5 242.8 219.8 208.6 201.9 198.1 195.6 193.9 192.7 192.0 191.5 191.8 191.9; ...
        391.5 254.9 223.1 211.1 204.2 198.8 195.6 194.5 193.4 192.9 193.2 193.4 193.6; ...
        395.0 262.3 226.4 213.9 206.4 201.0 197.4 196.3 195.3 194.8 195.0 194.8 195.2; ...
        400.0 265.7 231.7 217.7 208.7 203.3 200.2 198.5 197.4 196.8 196.9 197.0 197.0; ...
        391.0 272.3 237.4 222.1 212.6 206.5 203.5 201.1 199.8 199.3 199.6 199.4 199.4; ...
        417.2 283.0 243.3 226.9 216.7 210.7 206.6 204.3 202.7 202.1 201.6 201.6 201.6; ...
        422.3 290.9 250.1 232.4 220.6 214.0 209.6 206.8 205.5 205.3 205.3 205.3 205.3; ...
        436.1 300.1 259.1 238.0 225.2 217.9 213.2 210.5 209.3 209.0 209.0 209.0 209.0; ...
        454.8 309.9 266.9 244.7 231.7 222.5 216.9 214.6 214.6 214.6 214.6 214.6 214.6; ...
        476.3 323.7 274.3 247.3 233.6 224.2 220.3 220.3 220.3 220.3 220.3 220.3 220.3; ...
        ], 's/J'}; % Engine consumption as function of speed and torque
end

branches    
    t_out : D.t -> *;
    t_in: C.t -> *;
end

if (dynamic_responce == simscape.enum.onoff.off)
    variables(Access = private)
        w = {value = {initial_speed, 'rpm'}, priority = priority.high}; % Rotational speed
        t_in = { 0, 'N*m' };                    % Input shaft torque
        t_b = { 0, 'N*m' };                     % Friction torque
        throttle = {0, '1' };                   % Input shaft torque from engine map
        t_out = { 0, 'N*m' };                   % Load shaft torque
        power = {0, 'W'};                           % Engine power  
    end
    
    equations
       % Torque limit extrapolation
       t_in == tablelookup(rpm, torque_nom, w, interpolation = smooth, extrapolation = linear);
       t_b == tablelookup(rpm, torque_fricion, w, interpolation = smooth, extrapolation = linear);

       theta/100 == throttle;
       % Physical equation 
       w == D.w - C.w;
       w.der*cshaft_inertia == t_in*throttle + t_out + t_b;        
       % Outputs assignement
       te == t_in*throttle;
       power == te * w;
       we == w;
    end
else
    variables(Access=private)
        w = {value = {initial_speed, 'rpm'}, priority = priority.high}; % Rotational speed
        t_in = { 0, 'N*m' };                    % Input shaft torque
        t_b = { 0, 'N*m' };                     % Friction torque
%         y = { 0, 'N*m' };                       % Input shaft torque after second order filter as model of the throttle
%         y_out = { 0, 'N*m' };                       % Input shaft torque after second order filter as model of the throttle
%         yder = { 0, 'N*m/s' };                  % Input shaft torque after second order filter as model of the throttle
        x1 = { 0, '1' };                  % state variable of the second order filter as model of the throttle
        x2 = { 0, '1/s' };                    % state variable of the second order filter as model of the throttle
        throttle = {0, '1' };                  % Input shaft torque from engine map
        t_out = { 0, 'N*m' };                   % Load shaft torque
        power = {0, 'W'};                           % Engine power  
    end

    equations      
       % Torque limit extrapolation
       t_in == tablelookup(rpm, torque_nom, w, interpolation = smooth, extrapolation = linear);
       t_b == tablelookup(rpm, torque_fricion, w, interpolation = smooth, extrapolation = linear);

       % throttle model as second order filter with delay
        
%         theta/100 == throttle;
        te == t_in*x1;
        x1.der == x2 + (throttle - x1)*l1;
        x2.der == (throttle - x1)*l2;
        if (x2 > t_rate_lim) && (te > treshold_lim)
           throttle.der == t_rate_lim;
        else
           theta/100 == throttle;
        end
        
%         if (x2 > t_rate_lim) && (te > treshold_lim)
%            throttle.der == t_rate_lim;
%         elseif (x2 < -t_rate_lim) && (te < -treshold_lim)
%            throttle.der == -t_rate_lim;
%         else
%            theta.der/100 == throttle.der;
%         end
               
       % Physical equation 
       w == D.w - C.w;
       w.der*cshaft_inertia ==  te + t_out + t_b;
       
       % Outputs assignement
       power == te * w;
       we == w;
    end
end

end


