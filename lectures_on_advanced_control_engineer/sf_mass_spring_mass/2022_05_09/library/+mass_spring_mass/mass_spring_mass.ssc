component mass_spring_mass
% mass spring mass 
%     
    nodes
        S1 = foundation.mechanical.rotational.rotational; % S1:left
        S2 = foundation.mechanical.rotational.rotational; % S2:right
    end

    outputs
        tau_theta_out = { 0, 'N*m' }; % tau_theta
        omega1_out = { 0, 'rad/s' }; % omega1
        omega2_out = { 0, 'rad/s' }; % omega2
    end
    parameters
        b1 = { 1, '(N*m)*s/rad'};       % b1
        J1 = { 0.5, 'kg*m^2' };        % J1
        b2 = { 1, '(N*m)*s/rad'};       % b2
        J2 = { 0.5, 'kg*m^2' };        % J2
        b_theta = { 1, '(N*m)*s/rad'};  % b_theta
        k_theta = { 1e3, 'N*m/rad' };   % k_theta
    end

    variables
        omega_1 = { 0, 'rad/s' };           % w1
        omega_2 = { 0, 'rad/s' };           % w2
        tau_1 = { 0, 'N*m' };             % tau_1
        tau_2 = { 0, 'N*m' };             % tau_2
        tau_theta = { 0, 'N*m' };         % tau_theta
    end

    branches
        tau_1 : S1.t ->*;    
        tau_2 : S2.t ->*;    
    end

    equations
        omega_1 == S1.w;
        omega_2 == S2.w;
    
        omega_1.der == -(b_theta+b1)/J1*omega_1 + b_theta/J1*omega_2 ...
            -tau_theta/J1 + tau_1/J1;
        omega_2.der == b_theta/J2*omega_1 - (b_theta+b2)/J2*omega_2 +  ...
            tau_theta/J2 + tau_2/J2;
        tau_theta.der == k_theta*(omega_1 - omega_2);
        
        % outputs
        omega_1 == omega1_out;
        omega_2 == omega2_out;
        tau_theta == tau_theta_out;
    end
end
























