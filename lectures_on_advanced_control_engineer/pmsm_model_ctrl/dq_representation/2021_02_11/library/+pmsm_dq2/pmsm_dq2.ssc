component pmsm_dq2
% pmsm_dq2
% 
% Outputs Voltage and Current are in PEAK
    
    inputs
        ud = { 0, 'V' }; % __ud__ :left
        uq = { 0, 'V' }; % __uq__ :left
    end
    
    outputs
        omega_out = { 0, 'rad/s' }; %__omega_m__ :right
        tau_m = { 0, 'N*m' }; % __tau_e__ :right
        id_out = { 0, 'A' }; % __id__ :right
        iq_out = { 0, 'A' }; % __iq__ :right
        psi_d_out = { 0, 'V*s' }; % __psi_d__ :right
        psi_q_out = { 0, 'V*s' }; % __psi_q__ :right
        ed_out = { 0, 'V' }; % __ed__ :right
        eq_out = { 0, 'V' }; % __eq__ :right
        ud_out = { 0, 'V' }; % __ud__ :right
        uq_out = { 0, 'V' }; % __uq__ :right
    end
    
    nodes
       C = foundation.mechanical.rotational.rotational; % __C__ :left
       D = foundation.mechanical.rotational.rotational; % __D__ :right
    end

    parameters 
        emf_nom = {266.0, 'V'}          % Nominal No-load Voltage (PHASE PEAK)
        i_nom = {750,'A'};              % Nominal Current (PHASE PEAK)
        omega_nom = {209,'rad/s'};      % Nominal Speed
        poles = {8,'1'};                % Number of Poles
        Rs = {0.004,'Ohm'};             % Phase Resistance
        Ld = {0.0005, 'H'};             % Ld - Inductance
        Lq = {0.0005, 'H'};             % Lq - Inductance
        psi_m = {0.318, '1'};           % Magnet Flux (Wb - PEAK)
        J = { 7.5, 'kg*m^2' };          % Rotor Inertia
        b = { 0.1, '(N*m)*s/rad'};      % Viscosity of the Shaft
    end
    
    parameters (Access=private)
        psi_ref = {1, 'V*s'};          % Magnet Flux (Wb)
    end
    
    variables(Access=private)
        omega_m = { 0, 'rad/s' };   
        tau_load = { 0, 'N*m' };     
        id = { 0, 'A' }; 
        iq = { 0, 'A' };         
        psi_d = {value = { psi_m , 'V*s' }, priority = priority.high}; % MUST be set with high priority
        psi_q = {value = { 0 , 'V*s' }, priority = priority.high}; % MUST be set with high priority
    end

    branches
        tau_load : D.t ->*; 
    end
    equations
        let
            cp = poles/2;
%             psi_m_r = emf_nom/omega_nom/poles*2;
        in
     
            omega_m == D.w - C.w;
                      
            ud - Rs * id - Ld * id.der + cp * omega_m * Lq * iq + ...
                cp * omega_m * psi_q == 0;
            uq - Rs * iq - Lq * iq.der - cp * omega_m * Ld * id - ...
                cp * omega_m * psi_d == 0;
            psi_d.der == 0;
            psi_q.der == 0;
            tau_m == 3/2 * cp * (psi_ref * psi_m * iq + (Ld - Lq) * id * iq);
            J*omega_m.der == tau_m + tau_load - b*omega_m;;

            id_out == id;
            iq_out == iq;
            psi_d_out == psi_d;
            psi_q_out == psi_q;
            ed_out == -cp*omega_m*psi_q;
            eq_out == cp*omega_m*psi_d;
            omega_out == omega_m;
            ud_out == ud;
            uq_out == uq;
        end
    end
end
