component pmsm_alphabeta
% pmsm alpha beta
%         omega_m == s.w;
% 
%         omega == number_poles/2*s.w;
% 
%         theta.der == omega;
% 
%         ualpha - Rs * ialpha - Lalpha * ialpha.der + omega * psi_beta == 0;
% 
%         ubeta - Rs * ibeta - Lbeta * ibeta.der - omega * psi_alpha == 0;
%         
%         psi_alpha == psi_m * cos(theta);
% 
%         psi_beta ==  psi_m * sin(theta);
% 
%         torque_e_out == 3/2*number_poles/2*(psi_alpha * ibeta - psi_beta * ialpha);
% 
%         J*omega_m.der == torque_e_out - b*omega + tau_load;

    nodes
        u_alpha_p = foundation.electrical.electrical; % _u_alpha+_:left
        u_alpha_n = foundation.electrical.electrical; % _u_alpha-_:left

        u_beta_p = foundation.electrical.electrical; % _u_beta+_:left
        u_beta_n = foundation.electrical.electrical; % _u_beta-_:left

        s = foundation.mechanical.rotational.rotational; % _s_:right
    end
    
    inputs
        psi_m = { 0, 'V*s' }; % _psi_m_:left
    end

    outputs
        i_alpha_out = { 0, 'A' }; % _i_alpha_:right
        i_beta_out = { 0, 'A' }; % _i_beta_:right
        psi_alpha_out = { 0, 'V*s' }; % _psi_alpha_:right
        psi_beta_out = { 0, 'V*s' }; % _psi_beta_:right
        e_alpha_out = { 0, 'V' }; % _e_alpha_:right
        e_beta_out = { 0, 'V' }; % _e_beta_:right
        omega_elec_out = { 0, 'rad/s' }; % _omega_elec_:right
        omega_mech_out = { 0, 'rad/s' }; % _omega_mech_:right
        torque_e_out = { 0, 'N*m' }; % _torque_e_:right
    end

    parameters
        number_poles = {4, '1'};        % number of poles
        Lalpha = {100e-6, 'H'};         % Lalpha
        Lbeta = {100e-6, 'H'};          % Lbeta
        Rs = {11e-3,'Ohm'};             % Rs
        J = { 7, 'kg*m^2' };            % Jm
        b = { 0.01, 'N*m/(rad/s)' };    % b
    end

    variables
        theta = { 0, 'rad' };                       % theta elec
        omega = { 0, 'rad/s' };                     % omega elec
        omega_m = { 0, 'rad/s' };                   % omega mech
        ialpha = { 0, 'A' };                        % i alpha
        ibeta = { 0, 'A' };                         % i beta
        psi_alpha = { 0, 'V*s'};                    % psi alpha
        psi_beta = { 0, 'V*s'};                    % psi beta
        ualpha = { 0, 'V' };                        % u alpha
        ubeta = { 0, 'V' };                         % u beta 
        tau_load = { 0, 'N*m' };                    % torque
    end

    branches
        % through
        ialpha : u_alpha_p.i -> u_alpha_n.i;
        ibeta : u_beta_p.i -> u_beta_n.i;
        tau_load : s.t ->*; 
    end

    equations
        % across
        ualpha == u_alpha_p.v - u_alpha_n.v;
        ubeta == u_beta_p.v - u_beta_n.v;
        
        % equations
        omega_m == s.w;
        omega == number_poles/2*s.w;
        theta.der == omega;

        ualpha - Rs * ialpha - Lalpha * ialpha.der + omega * psi_beta == 0;
        ubeta - Rs * ibeta - Lbeta * ibeta.der - omega * psi_alpha == 0;
        
        psi_alpha == psi_m * cos(theta);
        psi_beta ==  psi_m * sin(theta);

        torque_e_out == 3/2*number_poles/2*(psi_alpha * ibeta - psi_beta * ialpha);
        J*omega_m.der == torque_e_out - b*omega + tau_load;
        
        % outputs
        i_alpha_out == ialpha;
        i_beta_out == ibeta;
        psi_alpha_out == psi_alpha;
        psi_beta_out == psi_beta;
        e_alpha_out == -omega*psi_beta;
        e_beta_out == omega*psi_alpha;
        omega_elec_out == omega;
        omega_mech_out == omega_m;
    end
end
