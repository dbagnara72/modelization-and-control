component pmsm_uvw
% pmsm uvw

    nodes
        uu_p = foundation.electrical.electrical;            % _uu+_:left
        uu_n = foundation.electrical.electrical;            % _uu-_:left
        uv_p = foundation.electrical.electrical;            % _uv+_:left
        uv_n = foundation.electrical.electrical;            % _uv-_:left
        uw_p = foundation.electrical.electrical;            % _uw+_:left
        uw_n = foundation.electrical.electrical;            % _uw-_:left
        S = foundation.mechanical.rotational.rotational;    % _S_:right
    end
    inputs
        psi_m = { 0.35, 'V*s' }; % _psi_m_:left
    end
    outputs
        id_out = { 0, 'A' };                    % _id_:right
        iq_out = { 0, 'A' };                    % _iq_:right
        iu_out = { 0, 'A' };                    % _iu_:right
        iv_out = { 0, 'A' };                    % _iv_:right
        iw_out = { 0, 'A' };                    % _iw_:right
        phi_d_out = { 0, 'V*s' };               % _phi_d_:right
        phi_q_out = { 0, 'V*s' };               % _phi_q:right
        tau_out = { 0, 'N*m' };                 % _torque_:right
        tau_out_r = { 0, 'N*m' };               % _torque_r_:right
        omega_out = { 0, 'rad/s' };             % _omega_elec_:right
        theta_out = { 0, 'rad' };               % _theta_elec_:right
    end

    parameters
        number_poles = {8, '1'};            % number_poles
        psi_M = {0.35, 'V*s'};              % psiM
        Lmu = {50e-6, 'H'};                 % Lmu
        Ls = {1e-3, 'H'};                   % Ls
        Lb = {200e-6, 'H'};                 % Lb
        Rs = {10e-3,'Ohm'};                 % Rs
        J = { 2.5, 'kg*m^2'};               % J
        b = { 0.1, 'N*m/(rad/s)'};          % b
    end

    variables
        omega = { 0, 'rad/s' };                                             % omega 
        theta = { 0, 'rad' };                                               % theta 
        iu = { 0, 'A' };                                                    % iu
        iv = { 0, 'A' };                                                    % iv
        iw = { 0, 'A' };                                                    % iw
        id = { 0, 'A' };                                                    % id
        iq = { 0, 'A' };                                                    % iq
        uv = { 0, 'V' };                                                    % uv
        uu = { 0, 'V' };                                                    % uu
        uw = { 0, 'V' };                                                    % uw
        
        phi_u = { value = { 0.395711868488222 , 'V*s' }, priority = priority.high };      % psi_u
        phi_v = { value = { -0.197855934244111 , 'V*s' }, priority = priority.high };     % psi_v
        phi_w = { value = { -0.197855934244111 , 'V*s' }, priority = priority.high };     % psi_w
%         phi_v = { -0.175 , 'V*s' };     % psi_v
%         phi_w = { -0.175 , 'V*s' };     % psi_w
        phi_d = { 0.0 , 'V*s' };                                            % phi_d
        phi_q = { 0.0, 'V*s' };                                             % phi_q
        psi_d = { 0.0 , 'V*s' };                                            % psi_d
        psi_q = { 0.0, 'V*s' };                                             % psi_q
        
        tau_l = { 0, 'N*m' };                                               % Load
        tau_m = { 0, 'N*m' };                                               % Electromagnetic torque
        tau_m_r = { 0, 'N*m' };                                             % Electromagnetic torque raw
    end

    branches
        iu : uu_p.i -> uu_n.i;
        iv : uv_p.i -> uv_n.i;        
        iw : uw_p.i -> uw_n.i;
        tau_l : S.t ->*; 
    end

    equations
        uu == uu_p.v - uu_n.v;
        uv == uv_p.v - uv_n.v;
        uw == uw_p.v - uw_n.v;
        omega == number_poles/2*S.w;
        
        uu - Rs * iu ...
            - omega*2*Lb*sin(2*theta)*iu - omega*2*Lb*sin(2*(theta-pi/3))*iv...
            - omega*2*Lb*sin(2*(theta+pi/3))*iw...
            - (Lmu+Ls-Lb*cos(2*theta)) * iu.der - (-1/2*Ls-Lb*cos(2*(theta-pi/3))) * iv.der - ...
            (-1/2*Ls-Lb*cos(2*(theta+pi/3))) * iw.der - phi_u.der  == 0;
        uv - Rs * iv ...
            - omega*2*Lb*sin(2*(theta-pi/3))*iu - omega*2*Lb*sin(2*(theta-2*pi/3))*iv...
            - omega*2*Lb*sin(2*(theta+pi))*iw...
            - (Lmu+Ls-Lb*cos(2*(theta-2*pi/3))) * iv.der - (-1/2*Ls-Lb*cos(2*(theta+pi))) * iw.der - ...
            (-1/2*Ls-Lb*cos(2*(theta-pi/3))) * iu.der - phi_v.der == 0;
        uw - Rs * iw ...
            - omega*2*Lb*sin(2*(theta+pi/3))*iu - omega*2*Lb*sin(2*(theta+pi))*iv...
            - omega*2*Lb*sin(2*(theta+2*pi/3))*iw...
            - (Lmu+Ls-Lb*cos(2*(theta+2*pi/3))) * iw.der - (-1/2*Ls-Lb*cos(2*(theta+pi/3))) * iu.der - ...
            (-1/2*Ls-Lb*cos(2*(theta+pi))) * iv.der - phi_w.der  == 0;
                
        phi_u.der == - omega * psi_m * sin(theta);
        phi_v.der == - omega * psi_m * sin(theta - 2*pi/3);
        phi_w.der == - omega * psi_m * sin(theta + 2*pi/3);        
        
%         phi_u == psi_m * cos(theta);
%         phi_v == psi_m * cos(theta - 2*pi/3);
%         phi_w == psi_m * cos(theta + 2*pi/3);

%         phi_u == psi_M * cos(theta);
%         phi_v == psi_M * cos(theta - 2*pi/3);
%         phi_w == psi_M * cos(theta + 2*pi/3);
        
        phi_d == 2/3*(phi_u*cos(theta) + phi_v*cos(theta - 2*pi/3) + phi_w*cos(theta + 2*pi/3));
        phi_q == -2/3*(phi_u*sin(theta) + phi_v*sin(theta - 2*pi/3) + phi_w*sin(theta + 2*pi/3));
        
        psi_q == phi_q + 3/2*(Ls + Lb)*iq;
        psi_d == phi_d + 3/2*(Ls - Lb)*id;        
        
%         psi_q == 0 + 3/2*(Ls + Lb)*iq;
%         psi_d == psi_m + 3/2*(Ls - Lb)*id;
        
        id == 2/3 * (iu*cos(theta) + iv*cos(theta - 2*pi/3) + iw*cos(theta + 2*pi/3));
        iq == -2/3 * (iu*sin(theta) + iv*sin(theta - 2*pi/3) + iw*sin(theta + 2*pi/3));
        
        tau_m == 3/2 * number_poles/2 * (psi_m * iq - 3*Lb*id*iq);
        tau_m_r == 3/2 * number_poles/2 * (psi_d * iq - psi_q * id);
        
        J*omega.der == number_poles/2*tau_m - b*omega + number_poles/2*tau_l;
        theta.der == omega;

        id_out == id;
        iq_out == iq;
        iu_out == iu;
        iv_out == iv;
        iw_out == iw;
        phi_d_out == phi_d;
        phi_q_out == phi_q;
        tau_out == tau_m;
        tau_out_r == tau_m_r;
        theta_out == mod(theta+3*pi,2*pi) - pi;
        omega_out == omega;
    end
end
