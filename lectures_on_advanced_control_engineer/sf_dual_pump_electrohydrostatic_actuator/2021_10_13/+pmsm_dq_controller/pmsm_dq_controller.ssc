component pmsm_dq_controller
% pmsm dq controller

    inputs
        omega_m = { 0, 'rad/s' }; % __Speed__ :left
        id = { 0, 'A' };  % _id_ :left
        iq = { 0, 'A' };  % _iq_ :left
        ed = { 0, 'V' };  % _ed_ :left
        eq = { 0, 'V' };  % _eq_ :left
    end
    
    outputs
        ud_out = { 0, 'V' }; % _ud_ :right
        uq_out = { 0, 'V' }; % _uq_ :right
    end
    
    inputs
        omega_ref = { 0, 'rad/s' }; % _Speed-Set-Point_ :left
        torque_ref = { 0, 'N*m' }; % _Torque-Set-Point_ :left
    end

    parameters 
        Speed_mode = simscape.enum.onoff.on;        % Speed mode Control
        TorqueLim = simscape.enum.onoff.on;         % Enable Torque Limit
        emf_nom = {266.0, 'V'}                      % Nominal No-load Voltage (PHASE PEAK)
        i_nom = {750,'A'};                          % Nominal Current (PHASE PEAK)
        omega_m_nom = {209,'rad/s'};                % Nominal Speed
        poles = {8,'1'};                            % Number of Poles
        Rs = {0.001,'Ohm'};                         % Phase Resistance
        Ld = {0.0005, 'H'};                         % Ld - Inductance
        Lq = {0.001, 'H'};                          % Lq - Inductance
        psi_m = {0.318, '1'};                       % Magnet Flux (Wb)
        kp_w = {1,'1'};                             % kp - Speed Ctrl
        ki_w = {1,'1/s'};                           % ki - Speed Ctrl
        kp_id = {0.5,'1'};                          % kp_id - Current Ctrl
        ki_id = {18,'1/s'};                         % ki_id - Current Ctrl
        kp_iq = {0.5,'1'};                          % kp_iq - Current Ctrl
        ki_iq = {18,'1/s'};                         % ki_iq - Current Ctrl
    end
    parameters (Access=private)
        psi_ref = {1, 'V*s'};          % Magnet Flux (Wb)
    end
    variables(Access=private)
        ud = { 0, '1' }; 
        uq = { 0, '1' }; 
        ud_i = { 0, '1' }; 
        uq_i = { 0, '1' }; 
        id_ref = { 0, '1' }; 
        iq_ref = { 0, '1' }; 
        iq_ref_i = { 0, '1' }; 
        omega_bez = { 0, 'rad/s' };
        omega = { 0, 'rad/s' };
    end

    equations
        let
            cp = poles/2;
            Ubez = emf_nom;
            Ibez = i_nom;
            Xbez = Ubez/Ibez;
            Lbez = Xbez/omega_bez;
            Rs_norm = Rs/Xbez;
            Ld_norm = Ld/Lbez;
            Lq_norm = Lq/Lbez;
            psi_bez = Ubez/omega_bez;
            psi_norm = psi_m*psi_ref/psi_bez;
            iq_lim = (torque_ref/(3/2*cp*psi_m*psi_ref))/Ibez;
        in       
            
            omega_bez == omega_m_nom * cp;
            omega == cp * omega_m;
            
            % controller - speed and torque (current)
            if Ld == Lq
                id_ref == 0;
            else
                id_ref == (psi_m*psi_ref/2/(Lq-Ld)-sqrt((psi_m*psi_ref)^2/4/(Lq-Ld)^2+(iq)^2))/Ibez;
            end
            
            if (TorqueLim == simscape.enum.onoff.on && (abs(iq_ref) >= iq_lim))
                iq_ref_i.der == 0;
                iq_ref == kp_w * (omega_ref - omega_m)/omega_m_nom + iq_ref_i;
            else
                iq_ref_i.der == ki_w * (omega_ref - omega_m)/omega_m_nom;          
                iq_ref == kp_w * (omega_ref - omega_m)/omega_m_nom + iq_ref_i;
            end
            
            if (Speed_mode == simscape.enum.onoff.on)
                ud == kp_id * (id_ref - id/Ibez) + ud_i + ed/Ubez - omega/omega_bez * Lq_norm * iq/Ibez;
                ud_i.der == ki_id * (id_ref - id/Ibez);
                uq == kp_iq * (iq_ref - iq/Ibez) + uq_i + eq/Ubez + omega/omega_bez * Ld_norm * id/Ibez;
                uq_i.der == ki_iq * (iq_ref - iq/Ibez); 
            else
%                 ud == kp_id * (id_ref - id/Ibez);
                ud == kp_id * (id_ref - id/Ibez) + ud_i + ed/Ubez - omega/omega_bez * Lq_norm * iq/Ibez;
                ud_i.der == ki_id * (id_ref-id/Ibez);
%                 uq == kp_iq * (iq_ref - iq/Ibez);
                uq == kp_iq * (iq_ref - iq/Ibez) + uq_i + eq/Ubez + omega/omega_bez * Ld_norm * id/Ibez;
                uq_i.der == ki_iq * (iq_lim - iq/Ibez);  
            end

            % outputs
            ud_out == ud*emf_nom;
            uq_out == uq*emf_nom;
        end
    end
end
