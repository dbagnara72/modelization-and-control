component pmsm_dq
% pmsm_dq
% 
% Ld * id.der = - R * id + cp * omega * Lq * iq + cp * omega * psi_q + ud;
% 
% Lq * iq.der = - R * iq - cp * omega * Ld * id - cp * omega * psi_d + uq;
% 
% psi_d.der = 0;
% 
% psi_q.der = 0;
% 
% tau_m = 3/2 * cp * (psi_ref * psi_m * iq + (Ld - Lq) * id * iq);
% 
% omega.der = 1/J(tau_m - tau_load);
% 
% Outputs Voltage and Current are in RMS
    
    outputs
        omega_out = { 0, 'rpm' }; %__omega_e__ :right
        tau_m = { 0, 'N*m' }; % __tau_e__ :right
        id_out = { 0, 'A' }; % __id__ :right
        iq_out = { 0, 'A' }; % __iq__ :right
        psi_d_out = { 0, 'V*s' }; % __psi_d__ :right
        psi_q_out = { 0, 'V*s' }; % __psi_q__ :right
        ed_out = { 0, 'V' }; % __ed__ :right
        eq_out = { 0, 'V' }; % __eq__ :right
        ud_out = { 0, 'V' }; % __ud__ :right
        uq_out = { 0, 'V' }; % __uq__ :right
    end
    
    nodes
       ud_p = foundation.electrical.electrical; % __ud+__:left
       ud_n = foundation.electrical.electrical; % __ud-__:left
       uq_p = foundation.electrical.electrical; % __uq+__:left
       uq_n = foundation.electrical.electrical; % __uq-__:left
       C = foundation.mechanical.rotational.rotational; % __C__ :left
       D = foundation.mechanical.rotational.rotational; % __D__ :right
    end

    parameters 
        iqLim = simscape.enum.onoff.off;       % Enable Current Limit
        emf_nom = {325.0, 'V'}          % Nominal No-load Voltage (LINE RMS)
        i_nom = {600,'A'};              % Nominal Current (PHASE RMS)
        rpm_nom = {2000,'rpm'};         % Nominal RPM
        poles = {8,'1'};                % Number of Poles
        R = {0.001,'Ohm'};              % Phase Resistance
        Ld = {0.0005, 'H'};              % Ld - Inductance
        Lq = {0.001, 'H'};              % Lq - Inductance
        psi_m = {0.318, '1'};           % Magnet Flux (Wb)
        J = { 1, 'kg*m^2' };            % Rotor Inertia
        b = { 0.1, '(N*m)*s/rad'};      % Viscosity of the Shaft
    end
    parameters (Access=private)
        psi_ref = {1, 'V*s'};          % Magnet Flux (Wb)
    end
    variables(Access=private)
        omega = { 0, 'rad/s' };   
        tau_load = { 0, 'N*m' };     
        id = { 0, 'A' }; 
        iq = { 0, 'A' };         
        ud = { 0, 'V' }; 
        uq = { 0, 'V' }; 
        psi_d = {value = { psi_m , 'V*s' }, priority = priority.high}; % MUST be set with high priority
        psi_q = {value = { 0 , 'V*s' }, priority = priority.high}; % MUST be set with high priority
    end


    branches
        id : ud_p.i -> ud_n.i;
        iq : uq_p.i -> uq_n.i;
        tau_load : D.t ->*; 
    end
    equations
        let
            cp = poles/2;
        in
            ud == ud_p.v - ud_n.v;
            uq == uq_p.v - uq_n.v;
        
            omega == D.w - C.w;
                      
            ud - R * id - Ld * id.der + cp * omega * Lq * iq + cp * omega * psi_q == 0;
            uq - R * iq - Lq * iq.der - cp * omega * Ld * id - cp * omega * psi_d == 0;
            psi_d.der == 0;
            psi_q.der == 0;
            tau_m == 3/2 * cp * (psi_ref * psi_m * iq + (Ld - Lq) * id * iq);
            J*omega.der == tau_m + tau_load - b*omega;;

            id_out == id/sqrt(2);
            iq_out == iq/sqrt(2);
            psi_d_out == psi_d;
            psi_q_out == psi_q;
            ed_out == -cp*omega*psi_q/sqrt(2);
            eq_out == cp*omega*psi_d/sqrt(2);
            omega_out == omega;
            ud_out == ud/sqrt(2);
            uq_out == uq/sqrt(2);
        end
    end
annotations
    Icon = 'pmsm.jpg';
end
end
